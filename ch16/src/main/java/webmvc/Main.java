//package webmvc;
//
//public class Main {
//    public static void main(String[] args) {
//        //модель - данные из предметной области, состояние приложения в контексте отдельного пользователя
//        //представление - данные в удобноя для пользователе формате, поддерживает взаимодействие с пользователями, проверка достоверности, стилевое оформление
//        //контроллер - обрабатывает запросы на основании действий пользователя, взаимодействуя с уровнем обслуживания, обновляя модель, направляя пользователя к соответствующему представлению от результатов выполнения
//
//        //реализация проектного шаблона MVC:
//        //1) запрос - направляется серверу. На стороне сервера предусмотрен диспетчер (DispatcherServlet)
//        //2) вызовы - диспетчер направляет запрос соответствующему контроллеру на основании информации из http-запроса и конфигурации веб-приложения
//        //3) вызов службы - контроллер взаимодействует с уровнем обслуживания
//        //4) заполнение модели - сведения, полученные из уровня обслуживания, используются контроллером для заполнения модели
//        //5) создание предствления - конкретное представление создается на основании модели
//        //6) ответ - контроллер возвращает пользователю соответствующее представление
//        //для ajax: браузер получает данные и частично обновляет существующее представление, другие представления не задействованы
//
//        //Иерархия контекстов
//        //WebApplicationContext - корневая конфигурация
//        //DispatcherServlet - диспетчер, могут быть несколько
//
//        //Жизненный цикл обработки запросов
//        //Запрос
//        //Фильтр
//        //Сервлет диспетчера - анализирует запросы и направляет их на обработку соответствующему контроллеру
//        //Общие службы - применяются по каждому запросу для поддержки интернационализации, тематического оформления и загрузки файлов. Конфигурация определена в WebApplicationContext
//        //Сопоставление с обработчиками - сопоставляет запросы с методами контроллера через @RequestMapping
//        //Перехватчик обработчиков - чтобы реализовать общую проверку или логику (вызываются ли обработчики только в рабочее время?)
//        //Распознаватель исключений в обработчиках - распознаватель непредвиденных исключений во время обработки запросов
//        //Распознаватель представлений - распознавание представлений на основе имени, возвращаемого контроллером
//        //Представление
//        //Ответ
//
//        //Конфигурирование модуля Spring MVC
//        //Корневой контекст WebApplicationContext
//        //Фильтры сервлетов, требующихся в Spring MVC
//        //Сервлеты диспетчеров в веб-приложении
//
//
//        //singers?lang=zh_HK - для использования настроек по языку
//    }
//}
